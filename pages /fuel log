
import React, { useState, useEffect } from "react";
import { Trip } from "@/entities/Trip";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Fuel, TrendingUp, DollarSign, Calendar } from "lucide-react";
import { format } from "date-fns";
import { motion } from "framer-motion";

export default function FuelLogs() {
  const [trips, setTrips] = useState([]);
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    loadTrips();
  }, []);

  const loadTrips = async () => {
    setIsLoading(true);
    const data = await Trip.list("-date");
    const tripsWithFuel = data.filter(trip => trip.fuel_consumed > 0);
    setTrips(tripsWithFuel);
    setIsLoading(false);
  };

  const totalFuelConsumed = trips.reduce((sum, trip) => sum + (trip.fuel_consumed || 0), 0);
  const totalFuelCost = trips.reduce((sum, trip) => sum + (trip.fuel_cost || 0), 0);
  const totalDistance = trips.reduce((sum, trip) => sum + (trip.distance_km || 0), 0);
  const avgEfficiency = totalDistance && totalFuelConsumed ? totalDistance / totalFuelConsumed : 0;
  const avgCostPerKm = totalDistance && totalFuelCost ? totalFuelCost / totalDistance : 0;

  return (
    <div className="min-h-screen p-6">
      <div className="max-w-6xl mx-auto space-y-8">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          className="flex flex-col md:flex-row justify-between items-start md:items-center gap-4"
        >
          <div>
            <h1 className="text-3xl md:text-4xl font-bold text-slate-900 mb-2">
              Fuel Analytics
            </h1>
            <p className="text-slate-600">Monitor your fuel consumption and costs</p>
          </div>
        </motion.div>

        {/* Statistics Cards */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
          <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ delay: 0.1 }}>
            <Card className="bg-gradient-to-br from-orange-500 to-orange-600 text-white">
              <CardContent className="p-6">
                <div className="flex justify-between items-start">
                  <div>
                    <p className="text-orange-100">Total Fuel</p>
                    <p className="text-2xl font-bold">{totalFuelConsumed.toFixed(1)}L</p>
                  </div>
                  <Fuel className="w-8 h-8 text-orange-200" />
                </div>
              </CardContent>
            </Card>
          </motion.div>

          <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ delay: 0.2 }}>
            <Card className="bg-gradient-to-br from-green-500 to-green-600 text-white">
              <CardContent className="p-6">
                <div className="flex justify-between items-start">
                  <div>
                    <p className="text-green-100">Total Cost</p>
                    <p className="text-2xl font-bold">₹{totalFuelCost.toFixed(2)}</p>
                  </div>
                  <DollarSign className="w-8 h-8 text-green-200" />
                </div>
              </CardContent>
            </Card>
          </motion.div>

          <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ delay: 0.3 }}>
            <Card className="bg-gradient-to-br from-blue-500 to-blue-600 text-white">
              <CardContent className="p-6">
                <div className="flex justify-between items-start">
                  <div>
                    <p className="text-blue-100">Efficiency</p>
                    <p className="text-2xl font-bold">
                      {avgEfficiency > 0 ? `${avgEfficiency.toFixed(1)} km/L` : 'N/A'}
                    </p>
                  </div>
                  <TrendingUp className="w-8 h-8 text-blue-200" />
                </div>
              </CardContent>
            </Card>
          </motion.div>

          <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ delay: 0.4 }}>
            <Card className="bg-gradient-to-br from-purple-500 to-purple-600 text-white">
              <CardContent className="p-6">
                <div className="flex justify-between items-start">
                  <div>
                    <p className="text-purple-100">Cost per km</p>
                    <p className="text-2xl font-bold">
                      {avgCostPerKm > 0 ? `₹${avgCostPerKm.toFixed(3)}` : 'N/A'}
                    </p>
                  </div>
                  <DollarSign className="w-8 h-8 text-purple-200" />
                </div>
              </CardContent>
            </Card>
          </motion.div>
        </div>

        {/* Fuel Log History */}
        <Card className="bg-white/80 backdrop-blur-sm border-slate-200">
          <CardHeader>
            <CardTitle className="flex items-center gap-2 text-slate-900">
              <Fuel className="w-5 h-5" />
              Fuel History
            </CardTitle>
          </CardHeader>
          <CardContent>
            {isLoading ? (
              <div className="space-y-4">
                {Array(3).fill(0).map((_, i) => (
                  <div key={i} className="animate-pulse">
                    <div className="h-20 bg-slate-200 rounded"></div>
                  </div>
                ))}
              </div>
            ) : trips.length === 0 ? (
              <div className="text-center py-12">
                <Fuel className="w-12 h-12 mx-auto mb-4 text-slate-300" />
                <p className="text-slate-500">No fuel data available</p>
                <p className="text-sm text-slate-400">Start logging trips with fuel consumption</p>
              </div>
            ) : (
              <div className="space-y-4">
                {trips.map((trip, index) => (
                  <motion.div
                    key={trip.id}
                    initial={{ opacity: 0, x: -20 }}
                    animate={{ opacity: 1, x: 0 }}
                    transition={{ delay: index * 0.1 }}
                    className="flex items-center justify-between p-4 rounded-lg bg-slate-50 hover:bg-slate-100 transition-colors duration-200"
                  >
                    <div className="flex items-center gap-4">
                      <div className="p-2 bg-orange-100 rounded-lg">
                        <Fuel className="w-5 h-5 text-orange-600" />
                      </div>
                      <div>
                        <p className="font-medium text-slate-900">
                          {trip.fuel_consumed}L consumed
                        </p>
                        <div className="flex items-center gap-4 text-sm text-slate-600">
                          <span className="flex items-center gap-1">
                            <Calendar className="w-4 h-4" />
                            {format(new Date(trip.date), 'MMM d, yyyy')}
                          </span>
                          <span>{trip.distance_km} km trip</span>
                          {trip.fuel_consumed > 0 && trip.distance_km > 0 && (
                            <span>
                              {(trip.distance_km / trip.fuel_consumed).toFixed(1)} km/L
                            </span>
                          )}
                        </div>
                      </div>
                    </div>
                    <div className="text-right">
                      <p className="font-semibold text-slate-900">
                        ₹{trip.fuel_cost?.toFixed(2) || '0.00'}
                      </p>
                      <Badge variant="outline" className="mt-1">
                        ₹{(trip.fuel_cost / trip.fuel_consumed || 0).toFixed(2)}/L
                      </Badge>
                    </div>
                  </motion.div>
                ))}
              </div>
            )}
          </CardContent>
        </Card>
      </div>
    </div>
  );
}

import React, { useState, useEffect } from "react";
import { Trip, MaintenanceRecord, Reminder } from "@/entities/all";
import { Button } from "@/components/ui/button";
import { Link } from "react-router-dom";
import { createPageUrl } from "@/utils";
import { Route, Fuel, Wrench, Plus, TrendingUp } from "lucide-react";
import { format } from "date-fns";
import { motion } from "framer-motion";

import StatsCard from "../components/dashboard/StatsCard";
import RecentActivity from "../components/dashboard/RecentActivity";
import UpcomingReminders from "../components/dashboard/UpcomingReminders";

export default function Dashboard() {
  const [trips, setTrips] = useState([]);
  const [maintenanceRecords, setMaintenanceRecords] = useState([]);
  const [reminders, setReminders] = useState([]);
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    loadData();
  }, []);

  const loadData = async () => {
    setIsLoading(true);
    const [tripsData, maintenanceData, remindersData] = await Promise.all([
      Trip.list("-date"),
      MaintenanceRecord.list("-date"),
      Reminder.list("-due_date")
    ]);
    setTrips(tripsData);
    setMaintenanceRecords(maintenanceData);
    setReminders(remindersData);
    setIsLoading(false);
  };

  const totalDistance = trips.reduce((sum, trip) => sum + (trip.distance_km || 0), 0);
  const totalFuelConsumed = trips.reduce((sum, trip) => sum + (trip.fuel_consumed || 0), 0);
  const totalFuelCost = trips.reduce((sum, trip) => sum + (trip.fuel_cost || 0), 0);
  const avgFuelEfficiency = totalDistance && totalFuelConsumed ? totalDistance / totalFuelConsumed : 0;

  return (
    <div className="min-h-screen p-6">
      <div className="max-w-7xl mx-auto space-y-8">
        <motion.div 
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          className="flex flex-col md:flex-row justify-between items-start md:items-center gap-4"
        >
          <div>
            <h1 className="text-3xl md:text-4xl font-bold text-slate-900 mb-2">
              Dashboard
            </h1>
            <p className="text-slate-600">Track your bike's performance and maintenance</p>
          </div>
          <div className="flex gap-3">
            <Link to={createPageUrl("Trips")}>
              <Button className="bg-gradient-to-r from-blue-600 to-blue-700 hover:from-blue-700 hover:to-blue-800 shadow-lg">
                <Plus className="w-4 h-4 mr-2" />
                Log Trip
              </Button>
            </Link>
          </div>
        </motion.div>

        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
          <StatsCard
            title="Total Distance"
            value={`${totalDistance.toFixed(0)} km`}
            icon={Route}
            color="bg-blue-600"
            trend="Lifetime total"
            delay={0.1}
          />
          <StatsCard
            title="Total Trips"
            value={trips.length}
            icon={TrendingUp}
            color="bg-green-600"
            trend={trips.length > 0 ? `Last: ${format(new Date(trips[0]?.date), 'MMM d')}` : 'No trips yet'}
            delay={0.2}
          />
          <StatsCard
            title="Fuel Efficiency"
            value={avgFuelEfficiency > 0 ? `${avgFuelEfficiency.toFixed(1)} km/L` : 'N/A'}
            icon={Fuel}
            color="bg-orange-500"
            trend="Average consumption"
            delay={0.3}
          />
          <StatsCard
            title="Fuel Cost"
            value={`â‚¹${totalFuelCost.toFixed(2)}`}
            icon={Wrench}
            color="bg-purple-600"
            trend="Total spent"
            delay={0.4}
          />
        </div>

        <div className="grid lg:grid-cols-3 gap-6">
          <div className="lg:col-span-2">
            <RecentActivity 
              trips={trips}
              maintenanceRecords={maintenanceRecords}
            />
          </div>

          <motion.div
            initial={{ opacity: 0, x: 20 }}
            animate={{ opacity: 1, x: 0 }}
            transition={{ delay: 0.5 }}
            className="space-y-6"
          >
            <UpcomingReminders reminders={reminders} />

            <div className="bg-gradient-to-br from-blue-600 to-blue-800 rounded-2xl p-6 text-white shadow-xl">
              <h3 className="text-lg font-bold mb-4">Quick Actions</h3>
              <div className="space-y-3">
                <Link to={createPageUrl("Trips")} className="block">
                  <Button variant="ghost" className="w-full justify-start text-white hover:bg-white/20">
                    <Route className="w-4 h-4 mr-3" />
                    Log New Trip
                  </Button>
                </Link>
                <Link to={createPageUrl("FuelLogs")} className="block">
                  <Button variant="ghost" className="w-full justify-start text-white hover:bg-white/20">
                    <Fuel className="w-4 h-4 mr-3" />
                    Add Fuel Entry
                  </Button>
                </Link>
                <Link to={createPageUrl("Maintenance")} className="block">
                  <Button variant="ghost" className="w-full justify-start text-white hover:bg-white/20">
                    <Wrench className="w-4 h-4 mr-3" />
                    Record Service
                  </Button>
                </Link>
              </div>
            </div>

            {trips.length > 0 && (
              <div className="bg-white/80 backdrop-blur-sm rounded-2xl p-6 border border-slate-200">
                <h3 className="font-bold text-slate-900 mb-4">This Month</h3>
                <div className="space-y-3">
                  <div className="flex justify-between items-center">
                    <span className="text-slate-600">Distance</span>
                    <span className="font-semibold">{totalDistance.toFixed(0)} km</span>
                  </div>
                  <div className="flex justify-between items-center">
                    <span className="text-slate-600">Trips</span>
                    <span className="font-semibold">{trips.length}</span>
                  </div>
                  <div className="flex justify-between items-center">
                    <span className="text-slate-600">Avg per trip</span>
                    <span className="font-semibold">
                      {trips.length > 0 ? (totalDistance / trips.length).toFixed(1) : 0} km
                    </span>
                  </div>
                </div>
              </div>
            )}
          </motion.div>
        </div>
      </div>
    </div>
  );
}

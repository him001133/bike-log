
import React, { useState, useEffect } from "react";
import { Trip } from "@/entities/Trip";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Plus, Route, Calendar, MapPin, Fuel, Edit, Trash2 } from "lucide-react";
import { format } from "date-fns";
import { motion, AnimatePresence } from "framer-motion";

import TripForm from "../components/trips/TripForm";

export default function Trips() {
  const [trips, setTrips] = useState([]);
  const [showForm, setShowForm] = useState(false);
  const [editingTrip, setEditingTrip] = useState(null);
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    loadTrips();
  }, []);

  const loadTrips = async () => {
    setIsLoading(true);
    const data = await Trip.list("-date");
    setTrips(data);
    setIsLoading(false);
  };

  const handleSubmit = async (tripData) => {
    if (editingTrip) {
      await Trip.update(editingTrip.id, tripData);
    } else {
      await Trip.create(tripData);
    }
    setShowForm(false);
    setEditingTrip(null);
    loadTrips();
  };

  const handleEdit = (trip) => {
    setEditingTrip(trip);
    setShowForm(true);
  };

  const handleDelete = async (trip) => {
    if (confirm('Are you sure you want to delete this trip?')) {
      await Trip.delete(trip.id);
      loadTrips();
    }
  };

  if (showForm) {
    return (
      <div className="min-h-screen p-6">
        <TripForm
          trip={editingTrip}
          onSubmit={handleSubmit}
          onCancel={() => {
            setShowForm(false);
            setEditingTrip(null);
          }}
        />
      </div>
    );
  }

  return (
    <div className="min-h-screen p-6">
      <div className="max-w-6xl mx-auto space-y-8">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          className="flex flex-col md:flex-row justify-between items-start md:items-center gap-4"
        >
          <div>
            <h1 className="text-3xl md:text-4xl font-bold text-slate-900 mb-2">
              Trip Logs
            </h1>
            <p className="text-slate-600">Track all your rides and journeys</p>
          </div>
          <Button 
            onClick={() => setShowForm(true)}
            className="bg-gradient-to-r from-blue-600 to-blue-700 hover:from-blue-700 hover:to-blue-800 shadow-lg"
          >
            <Plus className="w-4 h-4 mr-2" />
            Log New Trip
          </Button>
        </motion.div>

        {isLoading ? (
          <div className="grid gap-6">
            {Array(3).fill(0).map((_, i) => (
              <Card key={i} className="animate-pulse">
                <CardContent className="p-6">
                  <div className="h-20 bg-slate-200 rounded"></div>
                </CardContent>
              </Card>
            ))}
          </div>
        ) : trips.length === 0 ? (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            className="text-center py-16"
          >
            <Route className="w-16 h-16 mx-auto mb-6 text-slate-300" />
            <h3 className="text-xl font-semibold text-slate-600 mb-2">No trips logged yet</h3>
            <p className="text-slate-500 mb-6">Start tracking your rides by logging your first trip</p>
            <Button 
              onClick={() => setShowForm(true)}
              className="bg-gradient-to-r from-blue-600 to-blue-700 hover:from-blue-700 hover:to-blue-800"
            >
              <Plus className="w-4 h-4 mr-2" />
              Log First Trip
            </Button>
          </motion.div>
        ) : (
          <div className="grid gap-6">
            <AnimatePresence>
              {trips.map((trip, index) => (
                <motion.div
                  key={trip.id}
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ delay: index * 0.1 }}
                >
                  <Card className="bg-white/80 backdrop-blur-sm border-slate-200 hover:shadow-lg transition-all duration-300">
                    <CardHeader className="pb-4">
                      <div className="flex justify-between items-start">
                        <div className="flex items-center gap-3">
                          <div className="p-2 bg-blue-100 rounded-lg">
                            <Route className="w-5 h-5 text-blue-600" />
                          </div>
                          <div>
                            <CardTitle className="text-lg text-slate-900">
                              {trip.distance_km} km Trip
                            </CardTitle>
                            <div className="flex items-center gap-2 mt-1">
                              <Calendar className="w-4 h-4 text-slate-400" />
                              <span className="text-sm text-slate-600">
                                {format(new Date(trip.date), 'EEEE, MMMM d, yyyy')}
                              </span>
                            </div>
                          </div>
                        </div>
                        <div className="flex gap-2">
                          <Button
                            variant="outline"
                            size="icon"
                            onClick={() => handleEdit(trip)}
                            className="hover:bg-blue-50"
                          >
                            <Edit className="w-4 h-4" />
                          </Button>
                          <Button
                            variant="outline"
                            size="icon"
                            onClick={() => handleDelete(trip)}
                            className="hover:bg-red-50 text-red-600"
                          >
                            <Trash2 className="w-4 h-4" />
                          </Button>
                        </div>
                      </div>
                    </CardHeader>
                    <CardContent className="space-y-4">
                      {(trip.start_location || trip.end_location) && (

import React, { useState, useEffect } from "react";
import { Reminder } from "@/entities/Reminder";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Plus, Bell, Calendar, Edit, Trash2, CheckCircle, Clock } from "lucide-react";
import { format, isPast, differenceInDays } from "date-fns";
import { motion, AnimatePresence } from "framer-motion";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Save, X } from "lucide-react";

// ReminderForm component defined within the same file for brevity
const ReminderForm = ({ reminder, onSubmit, onCancel }) => {
  const [formData, setFormData] = useState(reminder || {
    title: '',
    due_date: new Date().toISOString().split('T')[0],
    priority: 'medium',
    notes: '',
  });

  const handleSubmit = (e) => {
    e.preventDefault();
    onSubmit(formData);
  };

  return (
    <form onSubmit={handleSubmit} className="space-y-6 p-1">
      <div className="space-y-2">
        <Label htmlFor="title" className="text-slate-700">Title</Label>
        <Input id="title" value={formData.title} onChange={(e) => setFormData({ ...formData, title: e.target.value })} placeholder="e.g., Renew Insurance" required />
      </div>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <div className="space-y-2">
          <Label htmlFor="due_date" className="text-slate-700">Due Date</Label>
          <Input id="due_date" type="date" value={formData.due_date} onChange={(e) => setFormData({ ...formData, due_date: e.target.value })} required />
        </div>
        <div className="space-y-2">
          <Label htmlFor="priority" className="text-slate-700">Priority</Label>
          <Select value={formData.priority} onValueChange={(value) => setFormData({ ...formData, priority: value })}>
            <SelectTrigger>
              <SelectValue placeholder="Select priority" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="low">Low</SelectItem>
              <SelectItem value="medium">Medium</SelectItem>
              <SelectItem value="high">High</SelectItem>
            </SelectContent>
          </Select>
        </div>
      </div>
      <div className="space-y-2">
        <Label htmlFor="notes" className="text-slate-700">Notes</Label>
        <Textarea id="notes" value={formData.notes} onChange={(e) => setFormData({ ...formData, notes: e.target.value })} placeholder="Any extra details..." />
      </div>
      <div className="flex gap-3 pt-4">
        <Button type="button" variant="outline" onClick={onCancel} className="flex-1"><X className="w-4 h-4 mr-2" />Cancel</Button>
        <Button type="submit" className="flex-1 bg-gradient-to-r from-blue-600 to-blue-700"><Save className="w-4 h-4 mr-2" />{reminder ? 'Update' : 'Save'}</Button>
      </div>
    </form>
  );
};


export default function Reminders() {
  const [reminders, setReminders] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [isFormOpen, setIsFormOpen] = useState(false);
  const [editingReminder, setEditingReminder] = useState(null);

  useEffect(() => {
    loadReminders();
  }, []);

  const loadReminders = async () => {
    setIsLoading(true);
    const data = await Reminder.list("-due_date");
    setReminders(data);
    setIsLoading(false);
  };
  
  const handleFormSubmit = async (formData) => {
    if (editingReminder) {
      await Reminder.update(editingReminder.id, formData);
    } else {
      await Reminder.create(formData);
    }
    setIsFormOpen(false);
    setEditingReminder(null);
    loadReminders();
  };

  const handleEdit = (reminder) => {
    setEditingReminder(reminder);
    setIsFormOpen(true);
  };
  
  const handleDelete = async (id) => {
    if (confirm('Are you sure you want to delete this reminder?')) {
      await Reminder.delete(id);
      loadReminders();
    }
  };

  const handleStatusChange = async (reminder) => {
    const newStatus = reminder.status === 'pending' ? 'completed' : 'pending';
    await Reminder.update(reminder.id, { ...reminder, status: newStatus });
    loadReminders();
  };
  
  const priorityColors = {
    high: "border-red-500",
    medium: "border-orange-500",
    low: "border-blue-500",
  };
  
  const getUrgencyInfo = (dueDate, status) => {
    if (status === 'completed') return { text: 'Completed', icon: CheckCircle, color: 'text-green-500' };
    const daysLeft = differenceInDays(new Date(dueDate), new Date());
    if (daysLeft < 0) return { text: `Overdue by ${Math.abs(daysLeft)} days`, icon: Clock, color: 'text-red-600' };
    if (daysLeft === 0) return { text: 'Due today', icon: Clock, color: 'text-orange-500' };
    return { text: `Due in ${daysLeft} days`, icon: Calendar, color: 'text-slate-600' };
  };

  const pendingReminders = reminders.filter(r => r.status === 'pending');
  const completedReminders = reminders.filter(r => r.status === 'completed');

  return (
    <div className="min-h-screen p-6">
      <div className="max-w-6xl mx-auto space-y-8">
        <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} className="flex justify-between items-center">
          <div>
            <h1 className="text-3xl md:text-4xl font-bold text-slate-900 mb-2">Reminders</h1>
            <p className="text-slate-600">Never miss an important date for your bike</p>
          </div>
          <Dialog open={isFormOpen} onOpenChange={(open) => { setIsFormOpen(open); if (!open) setEditingReminder(null); }}>
            <DialogTrigger asChild>
              <Button className="bg-gradient-to-r from-blue-600 to-blue-700 hover:from-blue-700 hover:to-blue-800 shadow-lg">
                <Plus className="w-4 h-4 mr-2" />Add Reminder
              </Button>
            </DialogTrigger>
            <DialogContent>
              <DialogHeader>
                <DialogTitle>{editingReminder ? 'Edit Reminder' : 'Add New Reminder'}</DialogTitle>
              </DialogHeader>
              <ReminderForm reminder={editingReminder} onSubmit={handleFormSubmit} onCancel={() => setIsFormOpen(false)} />
            </DialogContent>
          </Dialog>
        </motion.div>
        
        <div className="space-y-6">
          <h2 className="text-xl font-semibold text-slate-800">Pending</h2>
          {isLoading ? <p>Loading...</p> : pendingReminders.length === 0 ? <p className="text-slate-500">No pending reminders. Great job!</p> : (
            <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
              <AnimatePresence>
                {pendingReminders.map((r, i) => {
                  const urgency = getUrgencyInfo(r.due_date, r.status);
                  return (
                  <motion.div key={r.id} initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ delay: i * 0.05 }}>
                    <Card className={`bg-white/80 border-l-4 ${priorityColors[r.priority]}`}>
                      <CardContent className="p-4 flex flex-col h-full">
                        <div className="flex-grow">
                          <div className="flex justify-between items-start">
                             <h3 className="font-bold text-lg text-slate-900">{r.title}</h3>
                             <Badge variant={isPast(new Date(r.due_date)) && r.status === 'pending' ? 'destructive' : 'outline'} className="capitalize">{r.priority}</Badge>
                          </div>
                          <p className={`flex items-center gap-2 text-sm mt-1 ${urgency.color}`}>
                            <urgency.icon className="w-4 h-4" />
                            {format(new Date(r.due_date), 'MMM d, yyyy')} ({urgency.text})
                          </p>
                          {r.notes && <p className="text-sm text-slate-600 mt-2 p-2 bg-slate-50 rounded">{r.notes}</p>}
                        </div>
                        <div className="flex gap-2 mt-4 pt-4 border-t">
                          <Button size="sm" variant="outline" onClick={() => handleStatusChange(r)} className="flex-1"><CheckCircle className="w-4 h-4 mr-2"/>Mark Done</Button>
                          <Button size="sm" variant="ghost" onClick={() => handleEdit(r)}><Edit className="w-4 h-4"/></Button>
                          <Button size="sm" variant="ghost" onClick={() => handleDelete(r.id)} className="text-red-500 hover:text-red-600"><Trash2 className="w-4 h-4"/></Button>
                        </div>
                      </CardContent>
                    </Card>
                  </motion.div>
                )})}
              </AnimatePresence>
            </div>
          )}
        </div>
        
        <div className="space-y-6">
          <h2 className="text-xl font-semibold text-slate-800">Completed</h2>
          {isLoading ? <p>Loading...</p> : completedReminders.length === 0 ? <p className="text-slate-500">No completed reminders yet.</p> : (
            <div className="space-y-2">
              {completedReminders.map(r => (
                <Card key={r.id} className="bg-slate-50/80 text-slate-500">
                  <CardContent className="p-3 flex justify-between items-center">
                    <div className="flex items-center gap-3">
                      <CheckCircle className="w-5 h-5 text-green-500"/>
                      <div>
                        <p className="line-through">{r.title}</p>
                        <p className="text-xs">Completed on {format(new Date(r.due_date), 'MMM d, yyyy')}</p>
                      </div>
                    </div>
                    <Button size="sm" variant="ghost" onClick={() => handleStatusChange(r)} className="text-xs">Mark Pending</Button>
                  </CardContent>
                </Card>
              ))}
            </div>
          )}
        </div>

      </div>
    </div>
  );
}